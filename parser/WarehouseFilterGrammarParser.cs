//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\larsj\WarehouseFilterParser\parser\WarehouseFilterGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class WarehouseFilterGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AND=1, OR=2, NOT=3, TRUE=4, FALSE=5, GT=6, GE=7, NE=8, LT=9, LE=10, EQ=11, 
		LPAREN=12, RPAREN=13, DECIMAL=14, IDENTIFIER=15, WS=16, Q=17, STRING=18, 
		COMMA=19;
	public const int
		RULE_parse = 0, RULE_expression = 1, RULE_methodCall = 2, RULE_comparator = 3, 
		RULE_binary = 4, RULE_bool = 5, RULE_argumentList = 6;
	public static readonly string[] ruleNames = {
		"parse", "expression", "methodCall", "comparator", "binary", "bool", "argumentList"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'>'", "'>='", "'!='", "'<'", "'<='", 
		"'='", "'('", "')'", null, null, null, "'\"'", null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AND", "OR", "NOT", "TRUE", "FALSE", "GT", "GE", "NE", "LT", "LE", 
		"EQ", "LPAREN", "RPAREN", "DECIMAL", "IDENTIFIER", "WS", "Q", "STRING", 
		"COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WarehouseFilterGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static WarehouseFilterGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WarehouseFilterGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WarehouseFilterGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(WarehouseFilterGrammarParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			expression(0);
			State = 15;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public BinaryContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(WarehouseFilterGrammarParser.DECIMAL, 0); }
		public DecimalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(WarehouseFilterGrammarParser.STRING, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(WarehouseFilterGrammarParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(WarehouseFilterGrammarParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WarehouseFilterGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WarehouseFilterGrammarParser.RPAREN, 0); }
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparatorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ComparatorContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		public ComparatorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new MethodCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 18;
				methodCall();
				}
				break;
			case 2:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19;
				Match(LPAREN);
				State = 20;
				expression(0);
				State = 21;
				Match(RPAREN);
				}
				break;
			case 3:
				{
				_localctx = new BoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23;
				@bool();
				}
				break;
			case 4:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24;
				Match(NOT);
				State = 25;
				expression(4);
				}
				break;
			case 5:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				Match(IDENTIFIER);
				}
				break;
			case 6:
				{
				_localctx = new DecimalExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27;
				Match(DECIMAL);
				}
				break;
			case 7:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 41;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 39;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new ComparatorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparatorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 31;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 32;
						((ComparatorExpressionContext)_localctx).op = comparator();
						State = 33;
						((ComparatorExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 35;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 36;
						((BinaryExpressionContext)_localctx).op = binary();
						State = 37;
						((BinaryExpressionContext)_localctx).right = expression(7);
						}
						break;
					}
					} 
				}
				State = 43;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(WarehouseFilterGrammarParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WarehouseFilterGrammarParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WarehouseFilterGrammarParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 4, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(IDENTIFIER);
			State = 45;
			Match(LPAREN);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << TRUE) | (1L << FALSE) | (1L << LPAREN) | (1L << DECIMAL) | (1L << IDENTIFIER) | (1L << STRING))) != 0)) {
				{
				State = 46;
				argumentList();
				}
			}

			State = 49;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(WarehouseFilterGrammarParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(WarehouseFilterGrammarParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(WarehouseFilterGrammarParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(WarehouseFilterGrammarParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(WarehouseFilterGrammarParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(WarehouseFilterGrammarParser.NE, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << NE) | (1L << LT) | (1L << LE) | (1L << EQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(WarehouseFilterGrammarParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(WarehouseFilterGrammarParser.OR, 0); }
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 8, RULE_binary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(WarehouseFilterGrammarParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(WarehouseFilterGrammarParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 10, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(WarehouseFilterGrammarParser.COMMA, 0); }
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWarehouseFilterGrammarVisitor<TResult> typedVisitor = visitor as IWarehouseFilterGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 12, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			expression(0);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 58;
				Match(COMMA);
				State = 59;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', '\x41', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', ' ', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '*', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '-', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x32', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '?', '\n', '\b', '\x3', '\b', '\x2', '\x3', 
		'\x4', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', '\x5', 
		'\x3', '\x2', '\b', '\r', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '\x6', 
		'\a', '\x2', '\x43', '\x2', '\x10', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x6', '.', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x35', '\x3', '\x2', '\x2', '\x2', '\n', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x39', '\x3', '\x2', '\x2', '\x2', '\xE', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x11', '\x5', '\x4', '\x3', '\x2', '\x11', 
		'\x12', '\a', '\x2', '\x2', '\x3', '\x12', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x14', '\b', '\x3', '\x1', '\x2', '\x14', ' ', '\x5', 
		'\x6', '\x4', '\x2', '\x15', '\x16', '\a', '\xE', '\x2', '\x2', '\x16', 
		'\x17', '\x5', '\x4', '\x3', '\x2', '\x17', '\x18', '\a', '\xF', '\x2', 
		'\x2', '\x18', ' ', '\x3', '\x2', '\x2', '\x2', '\x19', ' ', '\x5', '\f', 
		'\a', '\x2', '\x1A', '\x1B', '\a', '\x5', '\x2', '\x2', '\x1B', ' ', '\x5', 
		'\x4', '\x3', '\x6', '\x1C', ' ', '\a', '\x11', '\x2', '\x2', '\x1D', 
		' ', '\a', '\x10', '\x2', '\x2', '\x1E', ' ', '\a', '\x14', '\x2', '\x2', 
		'\x1F', '\x13', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', ' ', '+', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\f', '\t', 
		'\x2', '\x2', '\"', '#', '\x5', '\b', '\x5', '\x2', '#', '$', '\x5', '\x4', 
		'\x3', '\n', '$', '*', '\x3', '\x2', '\x2', '\x2', '%', '&', '\f', '\b', 
		'\x2', '\x2', '&', '\'', '\x5', '\n', '\x6', '\x2', '\'', '(', '\x5', 
		'\x4', '\x3', '\t', '(', '*', '\x3', '\x2', '\x2', '\x2', ')', '!', '\x3', 
		'\x2', '\x2', '\x2', ')', '%', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', 
		'\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x5', '\x3', '\x2', '\x2', '\x2', '-', '+', 
		'\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x11', '\x2', '\x2', '/', 
		'\x31', '\a', '\xE', '\x2', '\x2', '\x30', '\x32', '\x5', '\xE', '\b', 
		'\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\xF', '\x2', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\t', '\x2', '\x2', '\x2', '\x36', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\t', '\x3', '\x2', '\x2', '\x38', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\t', '\x4', '\x2', '\x2', 
		':', '\r', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x5', '\x4', '\x3', 
		'\x2', '<', '=', '\a', '\x15', '\x2', '\x2', '=', '?', '\x5', '\x4', '\x3', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', '\xF', '\x3', '\x2', '\x2', '\x2', '\a', '\x1F', ')', '+', 
		'\x31', '>',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
